openapi: 3.0.1
info:
  title: Capstone BE Starter
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: localhost
components:
  schemas:
    Quotes:
      additionalProperties: false
      type: object
      properties:
        firstName:
          type: string
          minLength: 2
        lastName:
          type: string
          minLength: 2
        email:
          type: string
        Address:
          type: string
          minLength: 5
        Age:
          type: number
          min: 18
          max: 65
        LOB:
          type: string
          minLength: 3
        VIN:
          type: string
          minLength: 3
        Premium:
          type: number          
      required:
        - firstName
        - lastName
        - email
        - Address
        - Age
        - LOB
        - VIN
        - Premium
    QuoteResponse:
      additionalProperties: false
      type: object
      properties:
        _id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        Address:
          type: string
        Age:
          type: number
        LOB:
          type: string
        VIN:
          type: string
        Premium:
          type: number
    Agents:
      additionalProperties: false
      type: object
      properties:
        firstName:
          type: string
          minLength: 2
        lastName:
          type: string
          minLength: 2
        Title:
          type: string
        email:
          type: string
          minLength: 5
        state:
          type: string
          minLength: 2
          maxLength: 2
        phoneNumber:
          type: string
          minLength: 10
        profileImage:
          data: Buffer
          contentType: string
      required:
        - firstName
        - lastName
        - Title
        - email
        - state
        - phoneNumber
        - profileImage
    AgentResponse:
      additionalProperties: false
      type: object
      properties:
        _id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        Title:
          type: string
        email:
          type: string
        state:
          type: number
        phoneNumber:
          type: string
    User:
      additionalProperties: false
      type: object
      properties:
        firstName:
          type: string
          minLength: 2
        lastName:
          type: string
          minLength: 2
        email:
          type: string
        password:
          type: string
      required:
        - firstName
        - lastName
        - email
        - password
    UserResponse:
      additionalProperties: false
      type: object
      properties:
        _id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
    Login:
      additionalProperties: false
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    LoginSuccess:
      additionalProperties: false
      type: object
      properties:
        token:
          type: string
        email:
          type: string
        statusCode:
          type: string
    OperationalError:
      allOf:
        - type: object
          properties:
            message:
              type: string
          required:
            - message
        - $ref: '#/components/schemas/ErrorStatusCode'
    ErrorStatusCode:
      type: object
      properties:
        statusCode:
          type: integer
          minimum: 400
          maximum: 599
      required:
        - statusCode
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    username:
      in: path
      name: username
      required: true
      schema:
        $ref: '#/components/schemas/User'
      description: The username of the user
  headers:
    WWW-Authenticate:
      description: Includes the URI location to receive a bearer token
      required: true
      schema:
        type: string
        enum:
          - >-
            Bearer realm="POST your username and password to /auth/login to
            receive a token"
  responses:
    '400':
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OperationalError'
    '401':
      description: Unauthorized
      headers:
        WWW-Authenticate:
          $ref: '#/components/headers/WWW-Authenticate'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OperationalError'
    '404':
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/OperationalError'
paths:
  /auth/login:
    post:
      summary: Login user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginSuccess'
        '400':
          $ref: '#/components/responses/400'
  /auth/logout:
    get:
      summary: Logout a user
      tags:
        - Auth
      security:
        - bearerAuth: []
      responses:
        '204':
          description: No Content
        '401':
          $ref: '#/components/responses/401'
  /api/users:
    get:
      summary: Get a list of users
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - name: firstName
          in: query
          description: Get users with a specific first name (fuzzy, case insensitve)
          required: false
          schema:
            firstName:
            type: string
        - name: lastName
          in: query
          description: Get users with a specific last name (fuzzy, case insensitve)
          required: false
          schema:
            firstName:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/400'
    post:
      summary: Create a new user
      operationId: createUser
      x-controller: users
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/400'
  /api/users/{email}:
    put:
      summary: Update user
      tags:
        - Users
      parameters:
        - in: path
          name: email
          required: true
          schema:
            type: string
            description: The email address of the user
      security:
        - bearerAuth: []
      requestBody:
        description: The user updates
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
  /api/quotes:
    get:
      summary: Get a list of quotes
      tags:
        - Quotes
      security:
        - bearerAuth: []
      parameters:
        - name: email
          in: query
          description: Get quotes with a specific email (fuzzy, case insensitve)
          required: false
          schema:
            email:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      quotes:
                        type: array
                        items:
                          $ref: '#/components/schemas/QuoteResponse'
        '400':
          $ref: '#/components/responses/400'
    post:
      summary: Create a new quote
      operationId: createQuote
      x-controller: quotes
      tags:
        - Quotes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Quotes'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      quote:
                        $ref: '#/components/schemas/QuoteResponse'
        '400':
          $ref: '#/components/responses/400'
  /api/quotes{email}:
    put:
      summary: Update quote
      tags:
        - Quotes
      parameters:
        - in: path
          name: email
          required: true
          schema:
            type: string
            description: The email address of the user
      security:
        - bearerAuth: []
      requestBody:
        description: The quote updates
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Quotes'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuoteResponse'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
  /api/agents/{email}:
    get:
      summary: Get a list of agents
      tags:
        - Agents
      security:
        - bearerAuth: []
      parameters:
        - name: email
          in: query
          description: Get agent with a specific email (fuzzy, case insensitve)
          required: false
          schema:
            email:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      quotes:
                        type: array
                        items:
                          $ref: '#/components/schemas/AgentResponse'
        '400':
          $ref: '#/components/responses/400'
  /api/agents:
    get:
      summary: Get a list of all agents
      tags:
        - Agents
      security:
        - bearerAuth: []
      parameters:
        - none
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      quotes:
                        type: array
                        items:
                          $ref: '#/components/schemas/AgentResponse'
        '400':
          $ref: '#/components/responses/400'
    post:
      summary: Create a new Agent
      operationId: createAgent
      x-controller: agents
      tags:
        - Agents
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Agents'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      agent:
                        $ref: '#/components/schemas/AgentResponse'
        '400':
          $ref: '#/components/responses/400'